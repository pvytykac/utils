allprojects  {
  apply plugin: 'java'
  apply plugin: 'jacoco'
  apply plugin: 'maven'

  repositories {
    mavenLocal()
    mavenCentral()
  }

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  group = 'org.pvytykac'
  version = '1.0'

  project.buildDir = 'target/'

  // jacoco test coverage configuration
  jacoco {
    toolVersion = "0.7.1.201405082137"
    reportsDir = file("$buildDir/reports/test-coverage")
  }
}

subprojects {

  // global version properties
  ext {
    junitVersion = '4.12'
    mockitoVersion = '1.9.5'
    powerMockVersion = '1.6.4'
    hsqlVersion = '2.2.9'
    slf4jVersion = '1.7.18'
    logbackVersion = '1.1.6'
    groovyVersion = "2.4.6"
  }

  dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: project.slf4jVersion
    compile group: 'ch.qos.logback', name: 'logback-classic', version: project.logbackVersion

    testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: project.groovyVersion
    testCompile group: 'junit', name: 'junit', version: project.junitVersion
    testCompile group: 'org.mockito', name: 'mockito-all', version: project.mockitoVersion
    testCompile group: 'org.powermock', name: 'powermock-core', version: project.powerMockVersion
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: project.powerMockVersion
    testCompile group: 'org.hsqldb', name: 'hsqldb', version: project.hsqlVersion
  }

  // run jacoco after test configuration
  tasks.getByPath(':test').finalizedBy jacocoTestReport

  // run tests before maven install
  tasks.getByPath(':install').dependsOn test

  gradle.projectsEvaluated {

    // java compiler options
    tasks.withType(JavaCompile) {
      options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

  }
}

// merge test coverage report of sub-modules
tasks.getByPath(':test').finalizedBy 'jacocoMerge'
task jacocoMerge(type: JacocoReport) {
  dependsOn = subprojects.test

  additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
  classDirectories =  files(subprojects.sourceSets.main.output)
  executionData = files(subprojects.jacocoTestReport.executionData)
}

// merge javadoc of sub-modules
tasks.getByPath(':javadoc').finalizedBy 'javadocMerge'
task javadocMerge(type: Javadoc) {
  dependsOn = subprojects.javadoc

  source subprojects.collect { project -> project.sourceSets.main.allJava }
  classpath = files(subprojects.collect {
    project -> project.sourceSets.main.allJava
  })
}
